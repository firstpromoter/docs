{
  "openapi": "3.0.1",
  "info": {
    "title": "FirstPromoter Commissions API",
    "version": "2.0.0",
    "description": "API for managing commissions in FirstPromoter"
  },
  "servers": [
    {
      "url": "https://v2.fprom.co/api/v2/company"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/commissions": {
      "get": {
        "summary": "Get all commissions",
        "description": "With this endpoint you can list all rewards and commissions assigned to a promotion, promoter, campaign or entire account using the API. \n <Tip>**HTTP Request** <br/>`GET https://firstpromoter.com/api/v2/company/commissions`</Tip>",
        "tags": ["Commissions"],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search params. Searches by initial_tier_event.transaction_id, lead.email, lead.uid",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CommissionFilters"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CommissionSorting"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a commission",
        "description": "With this endpoint you can create a commission. \n <Tip>**HTTP Request** <br/>`POST https://firstpromoter.com/api/v2/company/commissions`</Tip>",
        "tags": ["Commissions"],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommissionCreate"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/commissions/{id}": {
      "put": {
        "summary": "Update a commission",
        "description": "With this endpoint you can update a commission. \n <Tip>**HTTP Request** <br/>`PUT https://firstpromoter.com/api/v2/company/commissions/{id}`</Tip>",
        "tags": ["Commissions"],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Id of the commission"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommissionUpdate"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },

    "/commissions/approve": {
      "post": {
        "summary": "Approve commissions",
        "description": "With this endpoint you can approve commissions. \n <Tip>**HTTP Request** <br/>`POST https://firstpromoter.com/api/v2/company/commissions/approve`</Tip>",
        "tags": ["Commissions"],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchActionRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/commissions/deny": {
      "post": {
        "summary": "Deny commissions",
        "description": "With this endpoint you can deny commissions. \n <Tip>**HTTP Request** <br/>`POST https://firstpromoter.com/api/v2/company/commissions/deny`</Tip>",
        "tags": ["Commissions"],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchActionRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/commissions/mark_fulfilled": {
      "post": {
        "summary": "Mark commissions payout as fulfilled",
        "description": "With this endpoint you can mark commissions payout as fulfilled. \n <Tip>**HTTP Request** <br/>`POST https://firstpromoter.com/api/v2/company/commissions/mark_fulfilled`</Tip>",
        "tags": ["Commissions"],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchActionRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/commissions/mark_unfulfilled": {
      "post": {
        "summary": "Mark commissions payout as unfulfilled",
        "description": "With this endpoint you can mark commissions payout as unfulfilled. \n <Tip>**HTTP Request** <br/>`POST https://firstpromoter.com/api/v2/company/commissions/mark_unfulfilled`</Tip>",
        "tags": ["Commissions"],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchActionRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/commissions/destroy": {
      "delete": {
        "summary": "Delete commissions",
        "description": "With this endpoint you can delete commissions. \n <Tip>**HTTP Request** <br/>`DELETE https://firstpromoter.com/api/v2/company/commissions/destroy`</Tip>",
        "tags": ["Commissions"],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchActionRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/commissions/generate_payouts": {
      "post": {
        "summary": "Generate payouts for commissions",
        "description": "With this endpoint you can generate payouts for commissions. \n <Tip>**HTTP Request** <br/>`POST https://firstpromoter.com/api/v2/company/commissions/generate_payouts`</Tip>",
        "tags": ["Commissions", "Payouts"],
        "operationId": "generatePayouts",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Commission IDs to generate payouts for"
                  }
                },
                "required": ["ids"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Operation ID"
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the operation"
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of commissions"
                    },
                    "selected_total": {
                      "type": "integer",
                      "description": "Number of selected commissions"
                    },
                    "processed_count": {
                      "type": "integer",
                      "description": "Number of processed commissions"
                    },
                    "failed_count": {
                      "type": "integer",
                      "description": "Number of failed operations"
                    },
                    "action_label": {
                      "type": "string",
                      "description": "Action identifier"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Creation timestamp"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last update timestamp"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Additional metadata"
                    },
                    "progress": {
                      "type": "number",
                      "description": "Progress indicator (0-1)"
                    },
                    "processing_errors": {
                      "type": "array",
                      "description": "List of processing errors"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid bearer token"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "AccountId": {
        "name": "Account-ID",
        "in": "header",
        "required": true,
        "description": "Account identifier that specifies which account is making the request",
        "schema": {
          "type": "string",
          "example": "acc_123456"
        }
      }
    },
    "schemas": {
      "CommissionFilters": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["pending", "approved", "denied"]
          },
          "paid": {
            "type": "string",
            "enum": ["yes", "no"],
            "description": "Paid"
          },
          "sale_amount": {
            "type": "object",
            "properties": {
              "from": {
                "type": "integer",
                "description": "Sale amount from"
              },
              "to": {
                "type": "integer",
                "description": "Sale amount to"
              }
            }
          },
          "amount": {
            "type": "object",
            "properties": {
              "from": {
                "type": "integer",
                "description": "Amount from"
              },
              "to": {
                "type": "integer",
                "description": "Amount to"
              }
            }
          },
          "created_at": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "format": "date",
                "description": "created_at start date"
              },
              "to": {
                "type": "string",
                "format": "date",
                "description": "created_at end date"
              }
            }
          },
          "campaign_id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ],
            "description": "Campaign ids. Can be Integer or Array of Integers"
          },
          "payout_id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ],
            "description": "Payout ids. Can be Integer or Array of Integers"
          },
          "due_period": {
            "type": "string",
            "enum": ["next", "overdue", "custom"],
            "description": "Due period filter"
          },
          "promoter_id": {
            "type": "integer",
            "description": "Promoter id"
          },
          "first_commission": {
            "type": "boolean",
            "description": "First commission"
          },
          "refunded": {
            "type": "boolean",
            "description": "Refunded reward"
          },
          "fraud_check": {
            "type": "string",
            "enum": [
              "no_suspicion",
              "same_ip_suspicion",
              "same_promoter_email",
              "ad_source"
            ],
            "description": "Referral fraud check (suspicion). Array accepted"
          },
          "plan_id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ],
            "description": "Plan id"
          }
        }
      },
      "CommissionSorting": {
        "type": "object",
        "properties": {
          "sale_amount": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "The sort by sale direction"
          },
          "amount": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "The sort by amount direction"
          },
          "created_at": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "The sort by created_at direction"
          },
          "referral": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "The sort by referral direction"
          }
        }
      },
      "CommissionCreate": {
        "type": "object",
        "required": ["commission_type", "sale_amount", "amount"],
        "properties": {
          "commission_type": {
            "type": "string",
            "enum": ["sale", "custom"],
            "description": "The commission type"
          },
          "referral_id": {
            "type": "integer",
            "description": "Referral id required only for sale commission type"
          },
          "plan_id": {
            "type": "integer",
            "description": "One of the items id from price_ids"
          },
          "promoter_campaign_id": {
            "type": "integer",
            "description": "PromoterCampaign id required for custom commission type"
          },
          "sale_amount": {
            "type": "integer",
            "description": "Sale amount required only for sale commission type"
          },
          "amount": {
            "type": "integer",
            "description": "Commission amount required only for custom commission type"
          },
          "event_id": {
            "type": "string",
            "description": "The ID of the event that generated the sale from billing provider"
          },
          "event_date": {
            "type": "string",
            "format": "date",
            "description": "The date of the event that generated the sale"
          },
          "internal_note": {
            "type": "string",
            "description": "Internal note visible only by the team"
          },
          "unit": {
            "type": "string",
            "enum": [
              "cash",
              "credits",
              "points",
              "free_months",
              "mon_discount",
              "discount_per"
            ],
            "description": "Set the reward unit type"
          },
          "notify_promoter": {
            "type": "boolean",
            "description": "If true a notification email is sent to promoter if enabled on Emails section"
          },
          "billing_period": {
            "type": "string",
            "enum": ["monthly", "yearly", "one_time"],
            "description": "The billing period of the event that generated the sale"
          }
        }
      },
      "CommissionUpdate": {
        "type": "object",
        "properties": {
          "internal_note": {
            "type": "string",
            "description": "Internal note visible only by the team"
          },
          "external_note": {
            "type": "string",
            "description": "External note visible by the promoter"
          }
        }
      },
      "BatchActionRequest": {
        "type": "object",
        "properties": {
          "selection": {
            "type": "object",
            "properties": {
              "select_all": {
                "type": "boolean",
                "description": "Select all"
              },
              "selected_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Selected ids. Required when select_all is false or not present"
              },
              "unselected_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Unselected ids. Required when select_all is true"
              }
            }
          },
          "q": {
            "type": "string",
            "description": "Search params. Searches by initial_tier_event.transaction_id, lead.email, lead.uid"
          },
          "filters": {
            "$ref": "#/components/schemas/CommissionFilters"
          }
        }
      },
      "PayoutResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Operation ID"
          },
          "status": {
            "type": "string",
            "description": "Status of the operation",
            "example": "completed"
          },
          "total": {
            "type": "integer",
            "description": "Total number of commissions"
          },
          "selected_total": {
            "type": "integer",
            "description": "Number of selected commissions"
          },
          "processed_count": {
            "type": "integer",
            "description": "Number of processed commissions"
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of failed operations"
          },
          "action_label": {
            "type": "string",
            "description": "Action identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "meta": {
            "type": "object",
            "description": "Additional metadata"
          },
          "progress": {
            "type": "number",
            "description": "Progress indicator (0-1)"
          },
          "processing_errors": {
            "type": "array",
            "description": "List of processing errors",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Access token passed as a Bearer token in the Authorization header"
      },
      "accountId": {
        "type": "apiKey",
        "in": "header",
        "name": "ACCOUNT-ID",
        "description": "Account ID required with bearer token"
      }
    }
  }
}
